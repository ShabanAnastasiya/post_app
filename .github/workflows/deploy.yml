name: Advanced Supabase CI/CD

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  # --- –ó–ê–î–ê–ß–ê ‚Ññ1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ ---
  lint-and-test:
    name:  Lint & Test Migrations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Supabase CLI
        uses: supabase/setup-cli-action@v1

      # –≠—Ç–æ—Ç —à–∞–≥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π Supabase, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
      - name: Test migrations on a clean local database
        run: |
          echo ">>> Starting local Supabase instance..."
          supabase start
          echo ">>> Testing migrations by resetting the database..."
          supabase db reset
          echo ">>> Migration test successful!"

  # --- –ó–ê–î–ê–ß–ê ‚Ññ2: –î–µ–ø–ª–æ–π (–ó–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ lint-and-test –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ) ---
  deploy:
    name: Deploy to Supabase
    runs-on: ubuntu-latest
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –∂–¥–µ—Ç, –ø–æ–∫–∞ `lint-and-test` –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —É—Å–ø–µ—à–Ω–æ
    needs: [lint-and-test]

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.ACTION_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Supabase CLI
        uses: supabase/setup-cli-action@v1

      # --- –®–ê–ì –î–ï–ü–õ–û–Ø –í DEV ---
      - name: Deploy Database & Edge Functions to DEV
        if: github.ref == 'refs/heads/develop'
        run: |
          echo ">>> Linking to DEV project..."
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_DEV }}
          echo ">>> Deploying database migrations..."
          supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD_DEV }}
          echo ">>> Deploying Edge Functions..."
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_ID_DEV }}

      # --- –®–ê–ì –î–ï–ü–õ–û–Ø –í PROD ---
      - name: Deploy Database & Edge Functions to PROD
        if: github.ref == 'refs/heads/main'
        run: |
          echo ">>> Linking to PROD project..."
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID_PROD }}
          echo ">>> Deploying database migrations..."
          supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD_PROD }}
          echo ">>> Deploying Edge Functions..."
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_ID_PROD }}

      # --- –®–ê–ì –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í SLACK (–í—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è) ---
      - name: Send Slack Notification on Success
        if: success() # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow # –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
          text: '‚úÖ Deployment to `${{ github.ref_name }}` completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification on Failure
        if: failure() # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: 'üö® Deployment to `${{ github.ref_name }}` FAILED! Check logs.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}